#!/usr/bin/env python3
"""Runs a folder with battle files"""

import argparse
import json
import subprocess
import shutil
import time
from pathlib import Path
from dataclasses import dataclass
import os


class ScopedFile:
    """This object remembers file state and restores it on scope leave"""

    def __init__(self, path: Path):
        self.path = path
        self.file_content: bytes | None = None

    def __enter__(self):
        if self.path.is_file() and self.path.exists():
            with open(file=self.path, mode="rb") as file:
                self.file_content = file.read()
        return self

    def __exit__(self, etype, value, traceback):
        if self.file_content is None:
            # File did not exist so delete it now
            if self.path.is_file():
                self.path.unlink(missing_ok=True)
        else:
            with open(file=self.path, mode="wb") as file:
                file.write(self.file_content)


def set_sim_cli_params(sim_cli_path: Path, parameters: dict[str, str | Path]):
    """Sets specified parameters of simulation-cli"""

    for name, value in parameters.items():
        subprocess.run(check=True, args=[sim_cli_path, "set", name, value], cwd=sim_cli_path.parent)


def add_sanitizers_env(env: dict, output_dir: Path):
    # Evnironment variables specified below are used when simulation was built with google sanitizers enabled
    # This one is for https://clang.llvm.org/docs/AddressSanitizer.html
    # See more about ASAN_OPTIONS at https://github.com/google/sanitizers/wiki/AddressSanitizerFlags
    env["ASAN_OPTIONS"] = "log_path={}".format((output_dir / "asan.log").as_posix())

    # This one is for https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
    env["UBSAN_OPTIONS"] = "log_path={}".format((output_dir / "ubsan.log").as_posix())


def write_binary_file(path: Path, data: bytes):
    with open(file=path, mode="wb") as file:
        file.write(data)


# Convert profiling data to JSON file if path to utility is valid
# and profiling data files was generated by simulation-cli
def convert_profiling_data_to_json(
    converter_path: Path, profile_binary_data_path: Path, converted_profile_data_path: Path
):
    if (not converter_path is None) and converter_path.exists() and profile_binary_data_path.exists():
        subprocess.run(
            check=True,
            args=[
                converter_path,
                profile_binary_data_path,
                converted_profile_data_path,
            ],
        )


def run_directory_with_battle_files_batch(
    sim_cli_path: Path,
    battle_files_dir: Path,
    json_data_dir: Path,
    output_dir: Path,
    profile_converter_path: Path,
    with_debug_logs: bool,
    with_valgrind: bool,
):
    # Delete previous results
    shutil.rmtree(output_dir, ignore_errors=True)
    output_dir.mkdir(parents=True, exist_ok=True)

    # Specify profiling destination file
    profile_file_path = output_dir / "batch.prof"
    set_sim_cli_params(sim_cli_path, {"--profile_file_path": profile_file_path})

    sim_command = []
    if with_valgrind:
        sim_command.append("valgrind")
        sim_command.append("--tool=memcheck")
        valgrind_log = output_dir / "valgrind.log"
        sim_command.append(f"--log-file={valgrind_log.as_posix()}")

    sim_command.append(sim_cli_path)
    sim_command.extend(("run_batch", battle_files_dir, output_dir))

    sim_env = os.environ.copy()
    add_sanitizers_env(sim_env, output_dir)

    # Run simulation
    proc_result = subprocess.CompletedProcess[bytes]
    try:
        proc_result = subprocess.run(check=True, args=sim_command, capture_output=True, env=sim_env)
    except subprocess.CalledProcessError as error:
        print("Called process error during this command:")
        print(" ".join(str(x) for x in sim_command))
        raise error

    # Write stdout to a file
    write_binary_file(output_dir / "stdout_batch.txt", proc_result.stdout)

    convert_profiling_data_to_json(
        converter_path=profile_converter_path,
        profile_binary_data_path=profile_file_path,
        converted_profile_data_path=output_dir / "batch.prof.json",
    )


def run_directory_with_battle_files(
    sim_cli_path: Path,
    battle_files_dir: Path,
    json_data_dir: Path,
    output_dir: Path,
    profile_converter_path: Path,
    with_debug_logs: bool,
    with_valgrind: bool,
    batch: bool,
):
    """Runs simulation-cli tool on each file in the directory"""

    # Set common simulation-cli parameters
    set_sim_cli_params(
        sim_cli_path,
        {
            "--json_data_path": json_data_dir,
            "--log_pattern": "[%=15!n] [%l] %v",  # Override log pattern to exclude timestamps
            "--enable_debug_logs": str(with_debug_logs).lower(),
        },
    )

    if not output_dir.is_absolute():
        output_dir = Path.cwd() / output_dir

    if batch:
        run_directory_with_battle_files_batch(
            sim_cli_path=sim_cli_path,
            battle_files_dir=battle_files_dir,
            json_data_dir=json_data_dir,
            output_dir=output_dir,
            profile_converter_path=profile_converter_path,
            with_debug_logs=with_debug_logs,
            with_valgrind=with_valgrind,
        )
        return

    # Run each file manually
    for battle_file_path in battle_files_dir.rglob("*.json"):
        result_dir_name = battle_file_path.stem
        iter_result_dir = output_dir / result_dir_name

        # Delete previous results
        shutil.rmtree(iter_result_dir, ignore_errors=True)
        iter_result_dir.mkdir(parents=True)

        # Specify profiling destination file
        profile_file_path = iter_result_dir / f"{result_dir_name}.prof"
        set_sim_cli_params(sim_cli_path, {"--profile_file_path": profile_file_path})

        sim_command = []
        if with_valgrind:
            sim_command.append("valgrind")
            sim_command.append("--tool=memcheck")
            valgrind_log = iter_result_dir / "valgrind.log"
            sim_command.append(f"--log-file={valgrind_log.as_posix()}")

        sim_command.append(sim_cli_path)
        sim_command.extend(("run", battle_file_path))

        sim_env = os.environ.copy()
        add_sanitizers_env(sim_env, iter_result_dir)

        # Run simulation and measure duration
        sim_start_time = time.time()
        proc_result = subprocess.run(check=True, args=sim_command, capture_output=True, env=sim_env)
        sim_finish_time = time.time()

        # Write stdout to a file
        write_binary_file(iter_result_dir / "stdout.txt", proc_result.stdout)

        # Write simulation-cli process duration
        battle_duration_path = iter_result_dir / "duration.json"
        duration_file_data = {"duration": sim_finish_time - sim_start_time}
        write_binary_file(battle_duration_path, json.dumps(duration_file_data).encode("utf-8"))

        converted_prof_file_path = iter_result_dir / f"{result_dir_name}.prof.json"
        convert_profiling_data_to_json(
            converter_path=profile_converter_path,
            profile_binary_data_path=profile_file_path,
            converted_profile_data_path=converted_prof_file_path,
        )


@dataclass
class GroupSimulationRun:
    """Saves information about simulation-cli runs that had the same output"""

    stdout: bytes
    count: int = 1


def ensure_determinism(
    sim_cli_path: Path, battle_file_path: Path, json_data_dir: Path, output_dir: Path, runs_count: int
):
    """Runs specified battle file at battle_file_path runs_count times and checks that output is always the same"""
    set_sim_cli_params(
        sim_cli_path,
        {
            "--json_data_path": json_data_dir,
            "--log_pattern": "[%=15!n] [%l] %v",  # Override log pattern to exclude timestamps
        },
    )

    output_dir.mkdir(parents=True, exist_ok=True)

    # This list consists of pairs
    # The first element is stdout of a single run
    # the second element is the number of times this content was met
    groups: list[GroupSimulationRun] = list()
    for index in range(runs_count):
        proc_result = subprocess.run(
            check=True,
            args=[sim_cli_path, "run", battle_file_path],
            capture_output=True,
        )

        content = proc_result.stdout

        # Find group with same content
        group_index = -1
        for index, group in enumerate(groups):
            if content == group.stdout:
                group_index = index
                break

        if group_index == -1:
            groups.append(GroupSimulationRun(stdout=content))
        else:
            groups[group_index].count += 1

    # Save output of each group to file
    for group_index, group in enumerate(groups):
        path = output_dir / f"group_{group_index}_count_{group.count}.txt"
        with open(file=path, mode="wb") as group_file:
            group_file.write(group.stdout)

    # If there only one group then all files were identical
    num_groups = len(groups)
    if num_groups == 1:
        print(f"All {runs_count} gave exactly the same result.")
    else:
        print(
            f"There {num_groups} different output variants encounterent in {runs_count} simulations. Check {output_dir.as_posix()}."
        )


def ensure_absolute(path: Path | None) -> Path | None:
    """Converts specified path to absolute if necessary"""
    if path is None:
        return None
    if path.is_absolute():
        return path
    return path.absolute().resolve()


def main():
    """An entry point"""
    parser = argparse.ArgumentParser()

    def add_common_args(parser: argparse.ArgumentParser):
        # Add arguments that common for all commands
        parser.add_argument("--sim_cli_path", type=Path, required=True, help="Path to simulation-cli tool.")
        parser.add_argument(
            "--json_data_dir",
            type=Path,
            required=True,
            help="Path to directory with json files.",
        )
        parser.add_argument(
            "--output_dir",
            type=Path,
            required=True,
            help="Path to a directory where to store results",
        )

    subparsers = parser.add_subparsers(dest="command")
    run_directory_parser = subparsers.add_parser("run_directory", help="Runs combat files in specified directory.")
    add_common_args(run_directory_parser)

    # Arguments specific to run_directory command
    run_directory_parser.add_argument(
        "--battle_files_dir", type=Path, required=True, help="Path to directory with json files."
    )
    run_directory_parser.add_argument(
        "--profile_converter_path",
        type=Path,
        required=False,
        default=None,
        help="Path to a profiler_converter " "executable which is distributed with easy_profiler.",
    )
    run_directory_parser.add_argument(
        "--with_debug_logs",
        required=False,
        default=False,
        action="store_true",
        help="Enables debug logs in simulation",
    )
    run_directory_parser.add_argument(
        "--with_valgrind",
        required=False,
        default=False,
        action="store_true",
        help="Runs simulation using valgrind",
    )
    run_directory_parser.add_argument(
        "--batch", required=False, default=False, action="store_true", help="Runs all battle files in one process"
    )

    ensure_determinism_parser = subparsers.add_parser(
        "ensure_determinism",
        help="Runs specific battle file N times and checks that output is always the same",
    )
    add_common_args(ensure_determinism_parser)
    # Arguments specific to check_determinism command
    ensure_determinism_parser.add_argument(
        "--battle_file_path",
        type=Path,
        required=True,
        help="Path to battle JSON file.",
    )
    ensure_determinism_parser.add_argument(
        "--runs_count",
        type=int,
        required=True,
        help="Path to battle JSON file.",
    )

    cli_parameters = parser.parse_args()

    cli_parameters.sim_cli_path = ensure_absolute(cli_parameters.sim_cli_path)
    cli_parameters.json_data_dir = ensure_absolute(cli_parameters.json_data_dir)
    cli_parameters.output_dir = ensure_absolute(cli_parameters.output_dir)

    settings_file = cli_parameters.sim_cli_path.parent / ".cli_settings.json"
    with ScopedFile(settings_file):  # Remember state of settings file to leave it untouched
        if cli_parameters.command == "run_directory":
            cli_parameters.profile_converter_path = ensure_absolute(cli_parameters.profile_converter_path)
            cli_parameters.battle_files_dir = ensure_absolute(cli_parameters.battle_files_dir)
            run_directory_with_battle_files(
                sim_cli_path=cli_parameters.sim_cli_path,
                battle_files_dir=cli_parameters.battle_files_dir,
                json_data_dir=cli_parameters.json_data_dir,
                output_dir=cli_parameters.output_dir,
                profile_converter_path=cli_parameters.profile_converter_path,
                with_debug_logs=cli_parameters.with_debug_logs,
                with_valgrind=cli_parameters.with_valgrind,
                batch=cli_parameters.batch,
            )
        elif cli_parameters.command == "ensure_determinism":
            cli_parameters.battle_file_path = ensure_absolute(cli_parameters.battle_file_path)
            ensure_determinism(
                sim_cli_path=cli_parameters.sim_cli_path,
                battle_file_path=cli_parameters.battle_file_path,
                json_data_dir=cli_parameters.json_data_dir,
                output_dir=cli_parameters.output_dir,
                runs_count=cli_parameters.runs_count,
            )


if __name__ == "__main__":
    main()
